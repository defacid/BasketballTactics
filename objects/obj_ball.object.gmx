<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_basketball</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alpha = 1;
type = "null";
touchedLast = noone;
canArc = 1;
arc = 0;
shooter = noone;
target = self;
distance = 0;
dir = point_direction(x, y, target.x, target.y);
rolling = 0;
passTime = room_speed;
canTurnover = 0;

home = instance_nearest(x, y, obj_homePlayer);
away = instance_nearest(x, y, obj_awayPlayer);
homeNearest = point_distance(x, y, home.x, home.y);
awayNearest = point_distance(x, y, away.x, away.y);

alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turnover();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>touchedLast = shooter.team;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//update distance variables
home = instance_nearest(x, y, obj_homePlayer);
away = instance_nearest(x, y, obj_awayPlayer);
homeNearest = point_distance(x, y, home.x, home.y);
awayNearest = point_distance(x, y, away.x, away.y);

motion_add(dir, (distance/passTime)/10);

if (speed &gt; distance/passTime &amp;&amp; !rolling) speed = distance/passTime;


//Set the passing speed
arc = (arc + 180/passTime) mod 360;
if (canArc) {
    draw_sprite_ext(spr_basketball, 0, x, y, 0.5 + 0.25*sin(degtorad(arc)), 0.5 + 0.25*sin(degtorad(arc)), arc*2, c_white, alpha);
}
else draw_sprite_ext(spr_basketball, 0, x, y, 0.5, 0.5, arc*2, c_white, alpha);

if (type = "blocked") {
    draw_set_alpha(1);
    draw_set_color(c_aqua);
    draw_circle(x, y, 8, 0);
}

if (!canTurnover) {
    if (type = "shoot") {
        if (abs(x - target.x) &lt; 32) {
            
            //Inline color
            /*
            draw_set_alpha(1);
            draw_set_color(c_aqua);
            draw_circle(x, y, 8, 0);
            */
            
            if ((target == obj_homeHoop &amp;&amp; y &lt; 32) || (target == obj_awayHoop &amp;&amp; y &gt; room_height - 32)) {
                dir = dir + 180 + 45 - random(90);
                arc = 0;
                distance = 16 + random(96);
                target = noone;
                type = "pass";
                speed = 0;
            }
        }
    }
    
    if (arc &gt;= 180) {
        if (type = "shoot") {
            if (point_distance(x, y, target.x, target.y) &lt; 16) {
                //SCORE
                
                var _points;
                if (abs(shooter.x - target.x) &lt; 112 &amp;&amp; abs(shooter.y - target.y) &lt; 128 || abs(shooter.x - target.x) &lt; 80 &amp;&amp; abs(shooter.y - target.y) &lt; 160 || abs(shooter.x - target.x) &lt; 48 &amp;&amp; abs(shooter.y - target.y) &lt; 192) _points = 2;
                else _points = 3;
                
                if (shooter.team == 0) obj_controller.homeScore += _points;
                else obj_controller.awayScore += _points;
                
                target.image_speed = 0.2;
                
                //TURNOVER
                alarm[1] = room_speed*2;
                canTurnover = 1;
                
                //instance_destroy();
                alpha = 0;
            }
            else if (point_distance(x, y, target.x, target.y) &lt; 32) {
                dir = dir + 180 + 45 - random(90);
                arc = 0;
                distance = 16 + random(96);
                target = noone;
                type = "pass";
            }
            else {
                arc = 0;
                rolling = 1;
                canArc = 0;
            }
        }
        else if (type = "pass"){
            if (homeNearest &lt;= 32 || awayNearest &lt;= 32) grab_ball();
            else {
                arc = 0;
                rolling = 1;
                canArc = 0;
            }
        }
    }
    
    if (rolling) {
        if (x &lt; 32 || y &lt; 32 || x &gt; room_width - 160 - 32 || y &gt; room_height - 32) {
            if (point_distance(x, y, shooter.x, shooter.y) &gt; 32) {
                if (homeNearest &lt;= 32 || awayNearest &lt;= 32) grab_ball();
                else {
                    global.possession = touchedLast;
                    
                    //TURNOVER
                    alarm[1] = room_speed*2;
                    canTurnover = 1;

                    //instance_destroy();
                }
            }
        }
        else if (homeNearest &lt;= 32 || awayNearest &lt;= 32) grab_ball();
    }
    
    if (x &lt; 0 || x &gt; room_width - 160 || y &lt; 0 || y &gt; room_height) {
        global.possession = touchedLast;
        
        //TURNOVER
        alarm[1] = room_speed*2;
        canTurnover = 1;
        
        alpha = 0;
        //instance_destroy();
    }
}

if (x &lt; 0 || x &gt; room_width - 160 || y &lt; 0 || y &gt; room_height) {
    alpha = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
