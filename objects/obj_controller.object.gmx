<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Make random more random
random_set_seed(current_time);

//Set globals
global.possession = -1;
global.selected = 0;
global.highlighted = 0;
global.turn = -1;
global.firstTurn = -1;
global.passing = 0;
global.actionClear = 1;

//Init
turns = 300; //15 min * 60 sec = 900 - Each turn is 3 seconds
shotClockMax = 10; // 8 - 24 Second Shot Clock | 10 - 30 Second Shot Clock 
shotClock = shotClockMax; 
homeScore = 0;
awayScore = 0;
selectedPlayer = self;
canMove = -1;
canTurnover = 0;

//Default Player Stats
name = random_name(); //name[0] - First Name, name[1] - Last Name
faceColor = make_color_rgb(90, 55, 0);
team = 1; //0 Home - 1 Away
position = "Default";
height = 6*12+7;
weight = 220;
post = 50;
midRange = 50;
threePoint = 50;
freeThrow = 50;
pass = 50;
quickness = 50;
stamina = 50;
strength = 50;
block = 50;
rebound = 50;
steal = 50;

//Set teams
player[0] = -1;
global.playerCount = 0;

with(obj_homePlayer) {
    obj_controller.player[global.playerCount] = self;
    global.playerCount++;
}

with(obj_awayPlayer) {
    obj_controller.player[global.playerCount] = self;
    global.playerCount++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>turnover();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Set Selected Player
for(i=0; i&lt;global.playerCount; i++) if (player[i].selected) selectedPlayer = player[i];

var turnsLeft, shotTurnsLeft, nameLine, scoreLine, lineHeight, lineSpacing, hudWidth, resetHover, endTurnHover;
turnsLeft = string(turns);
shotTurnsLeft = string(shotClock);
lineHeight = 8;
lineSpacing = 4;
hudWidth = room_width-352; //130 @ 480px width
actionHover = 0;
endTurnHover = 0;

nameLine[0] = "HOME";
scoreLine[0] = string(homeScore);

nameLine[1] = "AWAY"
scoreLine[1] = string(awayScore);

draw_set_alpha(1);

draw_set_color(c_black);
draw_rectangle(room_width - hudWidth + lineSpacing * 2, lineHeight - lineSpacing, room_width - lineSpacing * 2, lineHeight + 44, 0);
draw_set_color(c_dkgray);
draw_rectangle(room_width - hudWidth + lineSpacing * 2, lineHeight - lineSpacing, room_width - lineSpacing * 2, lineHeight + 16, 0);
draw_set_color(c_white);
draw_rectangle(room_width - hudWidth + lineSpacing * 2, lineHeight - lineSpacing, room_width - lineSpacing * 2, lineHeight + 44, 1);

draw_set_font(fnt_timerName);
draw_set_color(c_black);
draw_text_transformed(room_width - hudWidth + lineSpacing * 4 + 1 + 1, lineHeight + 1, "TURNS LEFT", .5, .5, 0);
draw_text_transformed(room_width - string_width("SHOT CLOCK")/2 - lineSpacing * 4 + 1, lineHeight + 1, "SHOT CLOCK", .5, .5, 0);

draw_set_color(c_white);
draw_text_transformed(room_width - hudWidth + lineSpacing * 4 + 1, lineHeight, "TURNS LEFT", .5, .5, 0);
draw_set_color(c_red);
draw_text_transformed(room_width - string_width("SHOT CLOCK")/2 - lineSpacing * 4, lineHeight, "SHOT CLOCK", .5, .5, 0);
lineHeight += string_height("SHOT CLOCK")/2 + 1;

var timerWidth, shotClockWidth;
timerWidth = string_width("TURNS LEFT")/2;
shotClockWidth = string_width("SHOT CLOCK")/2;

draw_set_font(fnt_timer);
draw_set_color(c_white);
draw_text_transformed(room_width - hudWidth + timerWidth/2 - string_width(turnsLeft)/4 + lineSpacing * 4, lineHeight, turnsLeft, .5, .5, 0);
draw_set_color(c_red);
draw_text_transformed(room_width - shotClockWidth/2 - lineSpacing * 4 - string_width(shotTurnsLeft)/4, lineHeight, shotTurnsLeft, .5, .5, 0);
lineHeight += string_height(turnsLeft)/2 + lineSpacing;

for(i=0; i&lt;=1; i++) {
    draw_set_font(fnt_teamName);
    if (global.turn == i) {
        draw_set_alpha(0.25);
        draw_set_color(c_white);
        draw_rectangle(room_width - hudWidth + 1, lineHeight + 8 - 4, room_width, lineHeight + 8 + 24 + 4, 0);
        draw_set_alpha(0.5);
        for(j=0; j&lt;8; j++) draw_text_transformed(room_width - hudWidth/2 - string_width(nameLine[i])/4 + lengthdir_x(1, j*(360/8)), lineHeight + lengthdir_y(1, j*(360/8)), nameLine[i], .5, .5, 0);
    }
    
    draw_set_alpha(1);
    switch(i) {
        case 0:
            draw_set_color(make_color_rgb(46, 49, 146));
            break;
        case 1:
            draw_set_color(make_color_rgb(121, 0, 0));
            break;
        default:
            draw_set_color(make_color_rgb(random(255), random(255), random(255)));
    }
    draw_text_transformed(room_width - hudWidth/2 - string_width(nameLine[i])/4, lineHeight, nameLine[i], .5, .5, 0);
    if (global.possession == i) {
        draw_set_color(c_white);
        draw_circle(room_width - hudWidth + 16 - 1, lineHeight + 20 - 1, 10, 0);
        draw_sprite_ext(spr_basketball, 0, room_width - hudWidth + 16, lineHeight + 20, .5, .5, 0, c_white, 1);
    }
    lineHeight += string_height(nameLine[i])/2 - lineSpacing*2;
    
    draw_set_color(c_white);
    draw_set_font(fnt_score);
    draw_text_transformed(room_width - hudWidth/2 - string_width(scoreLine[i])/4, lineHeight, scoreLine[i], .5, .5, 0);
    lineHeight += string_height(scoreLine[i])/2 - lineSpacing*2;
}

lineHeight += lineSpacing*2;

if (global.highlighted) {
    switch(team) {
        case 0:
            draw_set_color(make_color_rgb(46, 49, 146));
            break;
        case 1:
            draw_set_color(make_color_rgb(121, 0, 0));
            break;
        default:
            draw_set_color(make_color_rgb(random(255), random(255), random(255)));
    }
    draw_rectangle(room_width - hudWidth/2 - sprite_get_width(spr_face)/2 - 4, lineHeight - 4, room_width - hudWidth/2 + sprite_get_width(spr_face)/2 + 4, lineHeight + sprite_get_height(spr_face) + 4, 0);
    draw_sprite_ext(spr_face, 0, room_width - hudWidth/2 - sprite_get_width(spr_face)/2, lineHeight, 1, 1, 0, faceColor, 1);
    
    draw_set_font(fnt_statValue);
    draw_rectangle(room_width - hudWidth/2 - string_width(position)/4 - 4, lineHeight + sprite_get_height(spr_face) - 8, room_width - hudWidth/2 + string_width(position)/4 + 4, lineHeight + sprite_get_height(spr_face) + 10, 0);
    draw_set_color(c_white);
    draw_text_transformed(room_width - hudWidth/2 - string_width(position)/4, lineHeight + sprite_get_height(spr_face) - 8, position, .5, .5, 0);
    
    lineHeight += sprite_get_height(spr_face) + lineSpacing*3;
    
    var statName, statValue, statCount;
    statCount = 14;
    
    statName[0] = "";
    statValue[0] = name[0] + " " + name[1];
    
    statName[1] = "Height";
    statValue[1] = string(floor(height/12)) + "'" + string(height%12) + '"';
    
    statName[2] = "Weight";
    statValue[2] = string(weight) + "lbs.";
    
    statName[3] = "Post";
    statValue[3] = string(post);
    
    statName[4] = "Mid-Range";
    statValue[4] = string(midRange);
    
    statName[5] = "3 Point";
    statValue[5] = string(threePoint);
    
    statName[6] = "Free Throw";
    statValue[6] = string(freeThrow);
    
    statName[7] = "Pass";
    statValue[7] = string(pass);
    
    statName[8] = "Quickness";
    statValue[8] = string(quickness);
    
    statName[9] = "Stamina";
    statValue[9] = string(stamina);
    
    statName[10] = "Strength";
    statValue[10] = string(strength);
    
    statName[11] = "Block";
    statValue[11] = string(block);
    
    statName[12] = "Rebound";
    statValue[12] = string(rebound);
    
    statName[13] = "Steal";
    statValue[13] = string(steal);
    
    for(i=0; i&lt;statCount; i++) {
        if (i &gt; 0) {
            draw_set_color(c_white);
            draw_set_font(fnt_statName);
            draw_text_transformed(room_width - hudWidth + lineSpacing*2, lineHeight, statName[i], .5, .5, 0);
            
            if (i &gt;= 3) draw_set_color(merge_color(c_red, c_lime, (real(statValue[i])*2-100)/100)); //CHANGE THIS LATER
            else draw_set_color(c_white);
            draw_set_font(fnt_statValue);
            draw_text_transformed(room_width - lineSpacing*2 - string_width(statValue[i])/2, lineHeight, statValue[i], .5, .5, 0);
            lineHeight += string_height(statValue[i])/2 + lineSpacing/2;
        }
        else {
            draw_set_color(c_white); //CHANGE THIS LATER
            draw_set_font(fnt_statValue);
            draw_text_transformed(room_width - hudWidth/2 - string_width(statValue[i])/4, lineHeight, statValue[i], .5, .5, 0);
            lineHeight += string_height(statValue[i])/2 + lineSpacing/2;
        }
    }
    
    /*
    weight = 220;
    post = 50;
    midRange = 50;
    threePoint = 50;
    freeThrow = 50;
    pass = 50;
    quickness = 50;
    stamina = 50;
    strength = 50;
    block = 50;
    rebound = 50;
    steal = 50;
    */
}
else {
    //Draw player list
    for (i=0; i&lt;global.playerCount; i++) {
        draw_set_alpha(0.25 + 0.75*player[i].canMove);
        var _teamColor;
        switch(player[i].team) {
            case 0:
                _teamColor = make_color_rgb(46, 49, 146);
                break;
            case 1:
                _teamColor = make_color_rgb(121, 0, 0);
                break;
            default:
                _teamColor = make_color_rgb(random(255), random(255), random(255));
        }
        draw_set_color(_teamColor);
        if (player[i].ballHandler) draw_sprite_ext(spr_basketball, 0, room_width - hudWidth + 4, lineHeight + 12, 0.25, 0.25, 0, c_white, 1);
        draw_rectangle(room_width - hudWidth + lineSpacing + 4 - 2, lineHeight - 2, room_width - hudWidth + lineSpacing + 4 + sprite_get_width(spr_face)/4 + 1, lineHeight + sprite_get_height(spr_face)/4 + 1, 0);
        draw_sprite_ext(spr_face, 0, room_width - hudWidth + lineSpacing + 4, lineHeight, 0.25, 0.25, 0, player[i].faceColor, 1);

        draw_set_font(fnt_statName);
        if (player[i].selected) {
            draw_set_color(_teamColor);
            for (j=0; j&lt;8; j++) draw_text_transformed(room_width - hudWidth + lineSpacing + sprite_get_width(spr_face)/4 + 4 + 8 + lengthdir_x(1, j*360/8), lineHeight + 2 + lengthdir_y(1, j*360/8), player[i].name[0] + " " + player[i].name[1], .5, .5, 0);
            
        }
        draw_set_color(c_white);
        draw_text_transformed(room_width - hudWidth + lineSpacing + sprite_get_width(spr_face)/4 + 4 + 8, lineHeight + 2, player[i].name[0] + " " + player[i].name[1], .5, .5, 0);
        lineHeight += sprite_get_height(spr_face)/4 + lineSpacing + 2;
    }
    
    
    //Turn Menu
    var _teamColor;
    switch(global.turn) {
        case 0:
            _teamColor = make_color_rgb(46, 49, 146);
            break;
        case 1:
            _teamColor = make_color_rgb(121, 0, 0);
            break;
        default:
            _teamColor = make_color_rgb(random(255), random(255), random(255));
    }
    
    if (global.possession != -1 &amp;&amp; !canTurnover) {
        
        //Reset Positions
        /*
        if (mouse_x &gt; room_width - hudWidth + 8 &amp;&amp; mouse_x &lt; room_width - 8 &amp;&amp; mouse_y &gt; room_height - 40 - 32 - 8 &amp;&amp; mouse_y &lt; room_height - 40 - 8) resetHover = 1;
        
        if (mouse_check_button_pressed(mb_left) &amp;&amp; resetHover) {
            reset_positions();
        }
        
        draw_set_alpha(0.5 + 0.5*resetHover);
        draw_set_color(_teamColor);
        draw_rectangle(room_width - hudWidth + 8, room_height - 40 - 32 - 8, room_width - 8, room_height - 40 - 8, 0);
        
        draw_set_alpha(1 - 0.5*resetHover);
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_text_transformed(room_width - hudWidth/2, room_height - 40 - 32 - 1, "UNDO CHANGES");
        draw_set_halign(fa_left);
        */
        
        //Action Button
        if (global.selected &amp;&amp; selectedPlayer.team == global.turn &amp;&amp; selectedPlayer.canUndo &amp;&amp; !selectedPlayer.throwIn) {
            var actionName;
            if (selectedPlayer.canMove) {
                if (selectedPlayer.ballHandler) actionName = "SHOOT / PASS";
                else if (selectedPlayer.team == global.possession) actionName = "SET PICK";
                else actionName = "BOX OUT";
            }
            else actionName = "UNDO";
            
            if (mouse_x &gt; room_width - hudWidth + 8 &amp;&amp; mouse_x &lt; room_width - 8 &amp;&amp; mouse_y &gt; room_height - 40 - 32 - 8 &amp;&amp; mouse_y &lt; room_height - 40 - 8) actionHover = 1;
            
            if (mouse_check_button_pressed(mb_left) &amp;&amp; actionHover) {
                if (selectedPlayer.canMove) {
                    selectedPlayer.canMove = 0;
                    global.actionClear = 0;
                    
                    if (selectedPlayer.ballHandler) {
                        //Shoot/Pass
                        selectedPlayer.passing = 1;
                    }
                    else if (selectedPlayer.team == global.possession) {
                        //Set Pick
                        selectedPlayer.pick = 1;
                    }
                    else {
                        //Box Out
                        selectedPlayer.pick = 1;
                    }
                }
                else {
                    with (selectedPlayer) {
                        x = resetX;
                        y = resetY;
                        originX = resetX;
                        originY = resetY;
                        pick = 0;
                        steal = 0;
                        passing = 0;
                        canMove = 1;
                        canUndo = 1;
                    }
                    global.actionClear = 1;
                }
                    
            }
            
            draw_set_alpha(0.5 + 0.5*actionHover);
            draw_set_color(_teamColor);
            draw_rectangle(room_width - hudWidth + 8, room_height - 40 - 32 - 8, room_width - 8, room_height - 40 - 8, 0);
            
            draw_set_alpha(1 - 0.5*actionHover);
            draw_set_color(c_white);
            draw_set_halign(fa_center);
            draw_text_transformed(room_width - hudWidth/2, room_height - 40 - 32 - 1, actionName, .5, .5, 0);
            draw_set_halign(fa_left);
        }
        
        //End turn button
        if (mouse_x &gt; room_width - hudWidth + 8 &amp;&amp; mouse_x &lt; room_width - 8 &amp;&amp; mouse_y &gt; room_height - 32 - 8 &amp;&amp; mouse_y &lt; room_height - 8) endTurnHover = 1;
        
        if (mouse_check_button_pressed(mb_left) &amp;&amp; endTurnHover) {
        
            obj_homePlayer.selected = 0;
            obj_awayPlayer.selected = 0;
            global.selected = 0;
            
            var _turnover = 0;
            for (i=0; i&lt;global.playerCount; i++) {
                if (player[i].throwIn) _turnover = 1;
            }
            
            if (_turnover) {
                //TURNOVER
                alarm[1] = room_speed*2;
                canTurnover = 1;
            }
            else next_turn();
            
        }
        
        draw_set_alpha(0.5 + 0.5*endTurnHover);
        draw_set_color(_teamColor);
        draw_rectangle(room_width - hudWidth + 8, room_height - 32 - 8, room_width - 8, room_height - 8, 0);
        
        draw_set_alpha(1 - 0.5*endTurnHover);
        draw_set_color(c_white);
        draw_set_halign(fa_center);
        draw_text_transformed(room_width - hudWidth/2, room_height - 32 - 1, "END TURN", .5, .5, 0);
        draw_set_halign(fa_left);
    }
}

var _home, homeNearest, _away, awayNearest;
_home = instance_nearest(mouse_x, mouse_y, obj_homePlayer);
_away = instance_nearest(mouse_x, mouse_y, obj_awayPlayer);
homeNearest = point_distance(mouse_x, mouse_y, _home.x, _home.y);
awayNearest = point_distance(mouse_x, mouse_y, _away.x, _away.y);

if (homeNearest &gt; 16 &amp;&amp; awayNearest &gt; 16) {
    global.highlighted = 0;
    obj_homePlayer.highlighted = 0;
    obj_awayPlayer.highlighted = 0;
}

//Turnover if shotclock gets to zero
if (shotClock &lt; 1 &amp;&amp; !canTurnover) {
    //TURNOVER
    alarm[1] = room_speed*2;
    canTurnover = 1;
}

//Next turn if every teammember has moved

if (global.turn != -1) {
    var turnEnded;
    turnEnded = 1;
    
    for(j=0; j&lt;global.playerCount; j++) {
        if (player[j].team == global.turn &amp;&amp; player[j].canUndo != 0) turnEnded = 0;
    }
    if (turnEnded) next_turn();
}

//DEBUG
if (keyboard_check_pressed(ord('R'))) room_restart();
if (mouse_check_button_pressed(mb_right) &amp;&amp; global.turn != -1) {
    obj_homePlayer.selected = 0;
    obj_awayPlayer.selected = 0;
    global.selected = 1;
    next_turn();
}

if (mouse_check_button_released(mb_left) &amp;&amp; !actionHover &amp;&amp; !endTurnHover &amp;&amp; global.actionClear) {
    if (homeNearest &gt; 16 &amp;&amp; awayNearest &gt; 16) {
        global.selected = 0;
        
        with (obj_homePlayer) {
            if(!canMove) canUndo = 0;
            selected = 0;
        }
        
        with (obj_awayPlayer) {
            if(!canMove) canUndo = 0;
            selected = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
